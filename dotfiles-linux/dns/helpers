#!/bin/bash

################################################################################
# Same as reset_dns, but without the chattr_decorator
################################################################################
reset_dns() {
    _reset_network_manager
    _reset_systemd_resolved
}

_reset_network_manager() {
    if [ "$(systemctl is-enabled NetworkManager)" != "enabled" ]; then
        lg "NetworkManager is not enabled. Exiting."
        exit 1
    fi

    lg "Resetting NetworkManager"
    sudo rm -f /etc/NetworkManager/NetworkManager.conf
    sudo touch /etc/NetworkManager/NetworkManager.conf
    echo -e "[main]\nplugins=keyfile" | sudo tee /etc/NetworkManager/NetworkManager.conf >/dev/null

    sudo systemctl start NetworkManager
    while [ "$(systemctl is-active NetworkManager)" != "active" ]; do
        lg "Waiting for NetworkManager to start"
        sleep 1
    done

    lg "Clearing per-connection DNS settings"
    nmcli -t -f NAME connection show | while IFS= read -r conn; do
        nmcli connection modify "$conn" ipv4.dns ""
        nmcli connection modify "$conn" ipv4.ignore-auto-dns no
    done

    lg "NetworkManager reset completed."
}

_reset_systemd_resolved() {
    lg "Resetting systemd-resolved"
    sudo rm -f /etc/systemd/resolved.conf
    sudo touch /etc/systemd/resolved.conf
    sudo ln -sf /run/systemd/resolve/stub-resolv.conf /etc/resolv.conf
    sudo systemctl restart systemd-resolved
    sudo systemd-resolve --flush-caches
    sudo systemctl disable --now systemd-resolved
    lg "systemd-resolved reset completed."
}

################################################################################
# A Cmnd_Alias is defined that requires the root password to execute the chattr
# command on /etc/resolv.conf and /etc/NetworkManager/NetworkManager.conf. This
# way, the DNS settings are immutable unless the user has the root password,
# which can be set to a long and complex password.
################################################################################
update_sudoers() {
    # Define the lines to append
    lines="
# Protect DNS settings by requiring the root password
Cmnd_Alias DNS_PROTECTED = /bin/chattr -i /etc/resolv.conf, /bin/chattr -i /etc/NetworkManager/NetworkManager.conf
Defaults!DNS_PROTECTED rootpw"

    # File to modify
    sudoers_file="/etc/sudoers"

    # Check if the lines already exist
    if ! sudo grep -q "Cmnd_Alias DNS_PROTECTED" "$sudoers_file"; then
        # Append the lines if not found
        echo "$lines" | sudo tee -a "$sudoers_file" >/dev/null
        lg "Lines successfully added to sudoers file."
    else
        lg "Lines already exist in the sudoers file. No changes made."
    fi

    # Validate the sudoers file
    sudo visudo -c
    if [ $? -eq 0 ]; then
        lg "Sudoers file validated successfully."
    else
        lg "Error in the sudoers file. Please check it."
    fi
}

################################################################################
# Make a list of files mutable, runs a command, and makes them immutable again.
################################################################################
chattr_decorator() {
    local cmd
    cmd=$1
    shift
    _chattr_multiple -i "$@"
    eval "$cmd"
    _chattr_multiple +i "$@"
}

################################################################################
# Run the chattr command on multiple files.
################################################################################
_chattr_multiple() {
    local operation=$1
    shift
    for file in "$@"; do
        file=$(readlink -f "$file")
        lg "Running chattr $operation on $file"
        sudo chattr "$operation" "$file"
    done
}
