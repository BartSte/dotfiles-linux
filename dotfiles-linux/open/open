#!/usr/bin/env bash
set -euo pipefail
this_dir=$(dirname "$(readlink -f "$0")")

. "$this_dir"/openers.bash
. "$this_dir"/helpers.bash
. "$this_dir"/logger.bash

usage="Usage: $0 <path>
Opens a url or path in a preferred program.

The option --linuxpath can be used to convert a windows paths to a linux path.
This is useful when you want to open a windows file in linux. When you are not 
running linux, or the path is already a linux path, this option has no effect.

Options:
    -h, --help              Show this message and exit.
    -l, --log               Send debug messages a file.
    -q, --quiet             Suppress all output.
    -v, --verbose           Show more output.
    --convert2linuxpath     Tries to convert a windows path to a linux path. 
                            Turned off by default. This option has no effect if: 
                            wsl is not running, or the path is already a linux 
                            path.
    --convert2windowspath   Tries to convert a linux path to a windows path. 
                            Turned off by default. This option has no effect if:
                            wsl is not running, or the path is already a windows
                            path."

input=""
convert2linuxpath=false
convert2windowspath=false
while [[ $# -gt 0 ]]; do
    case $1 in
    -h | --help)
        echo "$usage"
        exit 0
        ;;
    --convert2linuxpath)
        convert2linuxpath=true
        ;;
    --convert2windowspath)
        convert2windowspath=true
        ;;
    -l | --log)
        OPEN_LOG_FILE="$2"
        shift
        ;;
    -q | --quiet)
        OPEN_LOG_LEVEL="quiet"
        ;;
    -v | --verbose)
        OPEN_LOG_LEVEL="verbose"
        ;;
    *)
        if [[ -z $input ]]; then
            input=$1
        else
            echo "Unknown option: $1" >&2
            exit 1
        fi
        ;;
    esac
    shift
done

################################################################################
# Tries to open a url in a browser. If the url is not a url, the function returns
# 1.
################################################################################
try_url() {
    log "Try url: $1" -v
    if is_url "$1"; then
        open_url "$1"
    else
        return 1
    fi
}

################################################################################
# Tries to open a file in a preferred program. If the file is not a file that is
# supported, the function returns 1.
#
# The input may be a path to a file, or in the format: path:line:column. The line
# and column are optional. If the line and column are not provided, the default
# is 1.
################################################################################
try_file() {
    local to_open file line column
    to_open=$1

    # Split the `to_open` string by setting the word separator to a colon
    # temporarily.
    IFS=':' read -r file line column <<<"$to_open"
    IFS=' ' # Reset IFS
    line=${line:-1}
    column=${column:-1}

    if running wsl; then
        if $convert2linuxpath; then
            file=$(wslpath -u "$file")
        elif $convert2windowspath; then
            file=$(wslpath -m "$file")
        fi
    fi

    log "Try file: $file, line: $line, column: $column" -v
    if has_type "$file" image; then
        log "Opening image: $file" -v
        open_img "$file"

    elif has_type "$file" pdf; then
        log "Opening pdf: $file" -v
        zathura "$file"

    elif has_type "$file" html; then
        log "Opening html: $file" -v
        open_url "$file"

    elif has_type "$file" text; then
        log "Opening text: $file" -v
        open_text "$file" "$line"

    else
        return 1
    fi
}

################################################################################
# Aborts the program with an error message.
################################################################################
abort() {
    log "$1"
    if running tmux; then
        tmux display-message -d 2000 "$1"
    fi
    exit 1
}

################################################################################
# The main function of the program. It tries to open the input as a url, and if
# that fails, it tries to open the input as a file.
################################################################################
main() {
    log_clear
    try_url "$1" || try_file "$1" || abort "Could not open $1"
}

main "$input"
