#!/usr/bin/env bash

usage="Usage: key2pane [options] [arguments]

Sends a sequence of keys to any tmux pane, based on the pane's current command.
Which keys to send, must be specified in a tmux configuration file:

set -g @key2pane-cmd-shell 'bash|zsh|fish'
set -g @key2pane-keys-shell 'echo hello_world'

set -g @key2pane-cmd-foo 'some other command'
set -g @key2pane-keys-foo 'some other keys'

here, the prefix @key2pane-cmd and @key2pane-keys must be the same, while the
suffixes (shell, foo) can be anything. The only thing these suffixes are used for
is to indicate which cmd belongs to which keys. Note that the cmd can be a bash 
regex, in this case, the \`shell\` keys will be sent if the current pane's
command is either bash, zsh, or fish.

The positional arguments can be used to populate placeholders in the keys. The
placeholders are curly braces with an optional number inside, where the number
indicates which argument to use, starting from 1. So {1} will be replaced by the
first argument, {2} by the second, and so on. If no number is provided, all the
arguments will be used. For example, if the command is: \`key2pane foo bar\`, 
and the keys are: \`echo {1} {2}\`, then the following keys will be sent to the
pane: \`echo foo bar\`.

The curly braces can be escaped by using a backslash. For example, \{1\} will be
replaced by {1}, and not by the first argument.

Arguments:
  arguments     The arguments that will populate the {} placeholder in the
                KEY2PANE_CMD_KEYS. By supplying a number within curly braces,
                only that argument will be used. For example, if the command is:
                \`key2pane foo bar\`, then {1} will be replaced by foo and {2}
                will be replaced by bar. A curly brace without a number will be
                replaced by all the arguments. The curly braces can be escaped
                by using a backslash. For example, \{1\} will be replaced by
                {1}, and not by the first argument.

Options:
  -h, --help      Print this help message and exit
  -s, --session   Specify the tmux session, default to current session
  -w, --window    Specify the tmux window. If not provided, the KEY2PANE_WINDOW
                  environment variable will be used, if not set, the current
                  window will be used.
  -p, --pane      Specify the tmux pane. If not provided, the KEY2PANE_PANE
                  environment variable will be used, if not set, the current
                  pane will be used.
  -l, --line      Specify the line number, default to 1
  -v, --verbose   Also log messages to stdout
  --logfile       Specify the log file"

#######################################
# Log a message to a log file, and stdout if verbose is set.
# Arguments:
#  message: The message to log.
#######################################
log() {
    local message=$1
    echo "$message" >>"$logfile"
    if $verbose; then
        echo "$message" >&2
    fi
}

#######################################
# Check if tmux is running.
#######################################
assert_tmux() {
    [[ -z $TMUX ]] && echo "Not in a tmux session" && exit 1
}

#######################################
# Parse the cli options and arguments.
#######################################
parse_args() {
    while [[ $# -gt 0 ]]; do
        case $1 in
        -h | --help)
            echo "$usage"
            exit 0
            ;;
        -s | --session)
            session=$2
            shift
            ;;
        -w | --window)
            window=$2
            shift
            ;;
        -p | --pane)
            pane=$2
            shift
            ;;
        -l | --line)
            line=$2
            shift
            ;;
        -v | --verbose)
            verbose=true
            ;;
        --logfile)
            logfile=$2
            shift
            ;;
        *)
            file=$1
            ;;
        esac
        shift
    done
}

#######################################
# Get the commands running in each pane of a window in a session.
# Arguments:
#   pane: The pane number
#   window: The window number
#   session: The session name
#
# Returns:
#  The commands running in each pane of a window in a session.
#  The format is: <pane_index> <pane_current_command>
#######################################
tmux_commands() {
    local pane=$1
    local window=$2
    local session=$3
    tmux list-panes -t "$session":"$window" -F '#{pane_index} #{pane_current_command}'
}

#######################################
# Check if the pane is running `cmd`.
# Arguments:
#  pane: The pane number
#  window: The window number
#  session: The session name
#
# Returns:
# 0 if the pane is running neovim, 1 otherwise.
#######################################
has_cmd() {
    local pane=$1
    local window=$2
    local session=$3
    local re_cmd=$4
    local cmd cmds

    cmds=$(tmux_commands "$pane" "$window" "$session")
    log "Tmux commands per pane number: $cmds"

    cmd=$(awk -v pane="$pane" '{if ($1 == pane) print $2}' <<<"$cmds")
    log "Command for pane $pane is: $cmd"

    [[ $cmd =~ $re_cmd ]]
}

#######################################
# Send keys to the pane. Relies on the following globals:
# session: The session name
# window: The window number
# pane: The pane number
# file: The file to open
# line: The line number
#######################################
sendkeys() {
    log "Sending keys: $@"
    tmux send-keys -t "$session":"$window"."$pane" "$@"
}

assert_tmux

line=1
pane=${KEY2PANE_PANE:-$(tmux display-message -p '#P')}
window=${KEY2PANE_WINDOW:-$(tmux display-message -p '#I')}
verbose=false
logfile=$(dirname "$(mktemp -u)")/key2pane.log
session=$(tmux display-message -p '#S')

parse_args "$@"

[[ -z $file ]] && {
    echo "$usage"
    exit 1
}

declare -A cmd_vs_keys
cmd_shell=$(tmux show -gv "@key2pane-cmd-shell")
keys_shell=$(tmux show -gv "@key2pane-keys-shell")
# cmd_vim=$(tmux show -gv "@key2pane-cmd-vim")
# keys_vim=$(tmux show -gv "@key2pane-keys-vim")

cmd_vs_keys[$cmd_shell]=$keys_shell
# cmd_vs_keys[$cmd_shell]=$keys_shell

log "KEY2PANE_PANE: $KEY2PANE_PANE"
log "KEY2PANE_WINDOW: $KEY2PANE_WINDOW"
log "cmd_vs_keys: $cmd_vs_keys"
log "The session:window:pane is: $session:$window:$pane"

for cmd in "${!cmd_vs_keys[@]}"; do
    if has_cmd "$pane" "$window" "$session" "$cmd"; then
        log "Command $cmd is running in $session:$window.$pane"
        sendkeys C-c
        eval "sendkeys \"${cmd_vs_keys[$cmd]}\""
        sendkeys Enter
        exit 0
    fi
done

log "No vim or a shell is running in $session:$window.$pane"
exit 1
