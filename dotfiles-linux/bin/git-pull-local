#!/usr/bin/env bash

set -euo pipefail

usage="Usage: git-pull-local [options]

Performs \`git pull\` on all local branches that are tracking an existing
remote branch. It is assumed that:
- The local and remote branches have the same name.
- The branches do not have whitespace in their names.

Options:
  -h, --help  Show this help message and exit
  -q, --quiet Do not show informative messages from this script.
  -v, --verbose  Show the git commands being executed"

verbose=false
debug=/dev/null
out=/dev/stderr
while [[ $# -gt 0 ]]; do
    case "$1" in
        -h | --help)
            echo "$usage"
            exit 0
            ;;
        -q | --quiet)
            out=/dev/null
            shift
            ;;
        -v | --verbose)
            verbose=true
            debug=/dev/stderr
            shift
            ;;
        *)
            break
            ;;
    esac
done

verbose() {
    if [[ $1 == true ]]; then
        set -x
    fi
}

#######################################
# Compare `git branch` with `git branch -r` to find branches that are tracking
# remote branches.
#######################################
get_branches() {
    local local_ remote
    git fetch --prune 2>"$debug"
    local_=$(git branch | sed 's/* //')
    remote=$(git branch -r | grep -v 'HEAD' | sed 's/ *origin\///')
    for branch in $local_; do
        if echo "$remote" | grep -qw "$branch"; then
            echo "$branch"
        fi
    done
}

#######################################
# Pull branches one by one.
#######################################
pull_branches() {
    while read -r branch; do
        echo "Pull branch: $branch" >"$out"
        git switch "$branch" >"$debug" 2>&1 || echo "Failed to switch to branch: $branch" >"$out"
        git pull >"$debug" 2>&1 || echo "Failed to pull branch: $branch" >"$out"
    done
}

verbose "$verbose"
current_branch=$(git branch --show-current 2>"$debug")
echo "Current branch: $current_branch" >"$out"

pull_branches <<<"$(get_branches)"

echo "Restore to branch: $current_branch" >"$out"
git switch "$current_branch" >"$debug" 2>&1
