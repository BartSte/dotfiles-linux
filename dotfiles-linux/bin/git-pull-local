#!/usr/bin/env bash

set -euo pipefail

usage="Usage: git-pull-local [options] <remote>

Performs \`git pull\` on all local branches that are tracking an existing
remote branch on the remote called <remote>. If no remote is specified, the
default remote is used by calling \`git remote\`.

It is assumed that the branches do not have whitespace in their names.

Options:
  -h, --help  Show this help message and exit
  -q, --quiet Do not show informative messages from this script.
  -v, --verbose  Show the git commands being executed"

verbose=false
debug=/dev/null
out=/dev/stderr
remote_name=''
while [[ $# -gt 0 ]]; do
    case "$1" in
        -h | --help)
            echo "$usage"
            exit 0
            ;;
        -q | --quiet)
            out=/dev/null
            shift
            ;;
        -v | --verbose)
            verbose=true
            debug=/dev/stderr
            shift
            ;;
        *)
            remote_name="$1"
            shift
            ;;
    esac
done

verbose() {
    if [[ $1 == true ]]; then
        set -x
    fi
}

#######################################
# git remote show <remote> will give the following output:
# ....
#  Remote branches:
#    develop tracked
#    main    tracked
#  Local branches configured for 'git pull':
#    develop merges with remote develop
#    main    merges with remote main
#  Local refs configured for 'git push':
#    develop pushes to develop (up to date)
#    main    pushes to main    (up to date)
#
# The branches listed under "Local branches configured for 'git pull'" are the
# ones we want to pull. This function extracts those branches.
#######################################
get_branches() {
    local remote="$1"
    if [[ -z $remote ]]; then
        remote=$(git remote)
    fi

    git fetch --all --prune 2>"$debug"

    local header_pull="Local.*'git pull'"
    local header_push="Local.*'git push'"
    git remote show "$remote" 2>&1 | 
        sed "0,/$header_pull/d;/$header_push/,\$d" | 
        awk '{print $1}'
}

#######################################
# Pull branches one by one.
#######################################
pull_branches() {
    while read -r branch; do
        echo "Pull branch: $branch" >"$out"
        git switch "$branch" >"$debug" 2>&1 || echo "Failed to switch to branch: $branch" >"$out"
        git pull >"$debug" 2>&1 || echo "Failed to pull branch: $branch" >"$out"
    done
}

verbose "$verbose"
current_branch=$(git branch --show-current 2>"$debug")
echo "Current branch: $current_branch" >"$out"

pull_branches <<<"$(get_branches "$remote_name")"

echo "Restore to branch: $current_branch" >"$out"
git switch "$current_branch" >"$debug" 2>&1
