#!/usr/bin/env bash

set -euo pipefail

usage="Usage: git-pull-local [options] <remote>

Performs \`git pull\` on all local branches that are tracking an existing
remote branch on the remote called <remote>. If no remote is specified, the
default remote is used by calling \`git remote\`.

It is assumed that the branches do not have whitespace in their names.

Options:
  -h, --help  Show this help message and exit
  -q, --quiet Do not show informative messages from this script.
  -v, --verbose  Show the git commands being executed"

quiet=false
git_quiet="-q"
remote_name=''
while [[ $# -gt 0 ]]; do
    case "$1" in
        -h | --help)
            echo "$usage"
            exit 0
            ;;
        -q | --quiet)
            quiet=true
            shift
            ;;
        -v | --verbose)
            git_quiet=""
            shift
            ;;
        *)
            remote_name="$1"
            shift
            ;;
    esac
done

# Write messages to stderr.
log() {
    if [[ $quiet == false ]]; then
        echo "$1" >&2
    fi
}

#######################################
#######################################
pull_branches() {
    local remote branch upstream
    remote=$1
    if [[ -z $remote ]]; then
        remote=$(git remote)
    fi

    # TODO: refactor
    git fetch --prune $git_quiet "$remote"
    git for-each-ref --format '%(refname:short)' refs/heads/ |
        while read -r branch; do
            upstream=$(git for-each-ref --format '%(upstream:short)' refs/heads/"$branch")
            if [ -n "$upstream" ]; then
                if git show-ref --verify --quiet refs/remotes/"$upstream"; then
                    git switch "$branch" $git_quiet
                    git pull $git_quiet
                fi
            fi
        done
}

current_branch=$(git branch --show-current || {
    log "No git branch found"
    exit 1
})
log "Current branch: $current_branch"

pull_branches "$remote_name"

log "Restore to branch: $current_branch"
git switch "$current_branch" $git_quiet
