#!/usr/bin/env bash

set -euo pipefail

usage="Usage: git-pull-local [options] <remote>

Performs \`git pull\` on all local branches that are tracking an existing
remote branch on the remote called <remote>. If no remote is specified, the
default remote is used by calling \`git remote\`.

It is assumed that the branches do not have whitespace in their names.

Options:
  -h, --help  Show this help message and exit
  -q, --quiet Do not show informative messages from this script.
  -v, --verbose  Show the git commands being executed"

quiet=false
verbose=false
remote_name=''
while [[ $# -gt 0 ]]; do
    case "$1" in
        -h | --help)
            echo "$usage"
            exit 0
            ;;
        -q | --quiet)
            quiet=true
            shift
            ;;
        -v | --verbose)
            verbose=true
            shift
            ;;
        *)
            remote_name="$1"
            shift
            ;;
    esac
done

# Write messages to stderr.
log() {
    if [[ $quiet == false ]]; then
        echo "$1" >&2
    fi
}

# Redirect stdout and stderr to /dev/null if verbose is false.
sink() {
    if [[ $verbose == false ]]; then
        exec &>/dev/null
    fi
}

#######################################
#######################################
get_branches() {
    local locals remotes remote
    remote=$1
    if [[ -z $remote ]]; then
        remote=$(git remote)
    fi

    git fetch "$remote" --prune
    locals=$(git branch --list --format="%(refname:short)" | grep -v 'HEAD')
    remotes=$(git branch --list --format="%(refname:short)" --remotes | grep -v "^$remote$")
    # Echo all names from locals that are also in remotes.
    for branch in $locals; do
        if grep -q "^$remote/$branch$" <<<"$remotes"; then
            echo "$branch"
        fi
    done
}

#######################################
# Pull branches one by one.
#######################################
pull_branches() {
    while read -r branch; do
        log "Pull branch: $branch"
        git switch "$branch"
        git pull
    done
}

current_branch=$(git branch --show-current || {
    log "No git branch found"
    exit 1
})
log "Current branch: $current_branch"

branches="$(get_branches "$remote_name")"
if [[ -z $branches ]]; then
    log "No branches to pull"
    exit 0
else
    pull_branches <<<"$branches"
fi

echo "Restore to branch: $current_branch"
git switch "$current_branch"
