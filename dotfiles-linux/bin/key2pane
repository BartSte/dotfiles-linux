#!/usr/bin/env bash

usage="Usage: key2pane [options] [file] 

Open a file in Neovim in a tmux window, session, and line, that can be specified
through the options. If the:

- session is not specified, the current session will be used. 
- window is not specified, KEY2PANE_WINDOW will be used, if not set, the current
  window will be used.
- pane is not specified, KEY2PANE_PANE will be used, if not set, the current pane
  will be used.
- line is not specified, the first line will be used.

When no vim/neovim is running in the specified pane, a new neovim instance will
be started if the pane is running a shell (zsh or bash). Otherwise, the script
will exit with code 1.

When passing the --verbose option, log messages will be printed to stdout.

Arguments:
  file            The file to open

Options:
  -h, --help      Print this help message and exit
  -s, --session   Specify the tmux session, default to current session
  -w, --window    Specify the tmux window, default to current window
  -p, --pane      Specify the tmux pane, default to current pane
  -l, --line      Specify the line number, default to 1
  -v, --verbose   Also log messages to stdout
  --logfile       Specify the log file"

#######################################
# Log a message to a log file, and stdout if verbose is set.
# Arguments:
#  message: The message to log.
#######################################
log() {
    local message=$1
    echo "$message" >>"$logfile"
    if $verbose; then
        echo "$message" >&2
    fi
}

#######################################
# Check if tmux is running.
#######################################
assert_tmux() {
    [[ -z $TMUX ]] && echo "Not in a tmux session" && exit 1
}

#######################################
# Parse the cli options and arguments.
#######################################
parse_args() {
    while [[ $# -gt 0 ]]; do
        case $1 in
        -h | --help)
            echo "$usage"
            exit 0
            ;;
        -s | --session)
            session=$2
            shift
            ;;
        -w | --window)
            window=$2
            shift
            ;;
        -p | --pane)
            pane=$2
            shift
            ;;
        -l | --line)
            line=$2
            shift
            ;;
        -v | --verbose)
            verbose=true
            ;;
        --logfile)
            logfile=$2
            shift
            ;;
        *)
            file=$1
            ;;
        esac
        shift
    done
}

#######################################
# Get the commands running in each pane of a window in a session.
# Arguments:
#   pane: The pane number
#   window: The window number
#   session: The session name
#
# Returns:
#  The commands running in each pane of a window in a session.
#  The format is: <pane_index> <pane_current_command>
#######################################
tmux_commands() {
    local pane=$1
    local window=$2
    local session=$3
    tmux list-panes -t "$session":"$window" -F '#{pane_index} #{pane_current_command}'
}

#######################################
# Check if the pane is running `cmd`.
# Arguments:
#  pane: The pane number
#  window: The window number
#  session: The session name
#
# Returns:
# 0 if the pane is running neovim, 1 otherwise.
#######################################
has_cmd() {
    local pane=$1
    local window=$2
    local session=$3
    local re_cmd=$4
    local cmd cmds

    cmds=$(tmux_commands "$pane" "$window" "$session")
    log "Tmux commands per pane number: $cmds"

    cmd=$(awk -v pane="$pane" '{if ($1 == pane) print $2}' <<<"$cmds")
    log "Command for pane $pane is: $cmd"

    [[ $cmd =~ $re_cmd ]]
}

#######################################
# Send keys to the pane. Relies on the following globals:
# session: The session name
# window: The window number
# pane: The pane number
# file: The file to open
# line: The line number
#######################################
sendkeys() {
    log "Sending keys: $@"
    tmux send-keys -t "$session":"$window"."$pane" "$@"
}

assert_tmux

line=1
pane=${KEY2PANE_PANE:-$(tmux display-message -p '#P')}
window=${KEY2PANE_WINDOW:-$(tmux display-message -p '#I')}
verbose=false
logfile=$(dirname "$(mktemp -u)")/key2pane.log
session=$(tmux display-message -p '#S')

parse_args "$@"

[[ -z $file ]] && {
    echo "$usage"
    exit 1
}

log "KEY2PANE_PANE: $KEY2PANE_PANE"
log "KEY2PANE_WINDOW: $KEY2PANE_WINDOW"
log "The pane is set to: $pane"
log "Then window is set to: $window"
log "The current session is: $session"

# TODO: make this modular by allowing the user to map a a regex for the pane
# command to a string that is used by the sendkeys function. For example:
# - 'vim|nvim' -> ':e $file|$line' Enter
# - 'zsh|bash' -> 'nvim -c ":e $file|$line"' Enter
if has_cmd "$pane" "$window" "$session" 'vim|nvim'; then
    log "Neovim is running in $session:$window.$pane"
    sendkeys C-c
    sendkeys ":e $file|$line" Enter

elif has_cmd "$pane" "$window" "$session" 'zsh|bash'; then
    log "A shell is running in $session:$window.$pane"
    sendkeys C-c
    sendkeys "nvim -c ':e $file|$line'" Enter

else
    log "No vim or a shell is running in $session:$window.$pane"
    exit 1
fi
