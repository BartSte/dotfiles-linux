#!/usr/bin/env python

"""
Script to estimate the minimal number of calories burned while cycling. The
assumptions are chosen such that the actual number of calories burned is
greater than the estimate.

Assumptions:
    - Wind speed is 0 m/s, assuming we start and end at the same location thus
    - No drafting behind other cyclists.
"""

from argparse import ArgumentParser, Namespace
from dataclasses import dataclass


@dataclass
class CyclingStatistics:
    """
    Based on the attributes, a set of cycling statistics are calculated and
    presented as properties.

    The "conventional racing bike parameters" of the following study were used:
        - https://www.sheldonbrown.com/rinard/aero/formulas.html

    Attributes
    ----------
        ascend_m: the total ascent in meters
        air_density_kgpm3: the air density in kg/m^3 (default: 1.225)
        cross_sectional_area_m2: the frontal area of the cyclist + bike in m^2
            (default: 0.509)
        distance_m: the distance cycled in meters
        drag_coefficient: the coefficient of drag (default: 0.88)
        gravity: the acceleration due to gravity in m/s^2 (default: 9.81)
        human_efficiency: the efficiency of the human body to convert calories
            to on the pedals of the bike (default: 0.25)
        roll_resistance: the coefficient of roll resistance (default: 0.005)
        time_s: the time taken to cycle the distance in seconds
        weight_kg: the weight of the cyclist + bike in kg

    """

    distance_m: float
    time_s: float
    weight_kg: float
    ascend_m: float
    descent_m: float

    air_density_kgpm3: float = 1.293
    drag_coefficient_times_area_m2: float = 0.39
    drive_train_efficiency: float = 0.95
    gravity: float = 9.81
    human_efficiency: float = 0.25
    roll_resistance: float = 0.003

    @property
    def summary(self) -> str:
        """
        Return the string representation of the result.

        Returns
        -------
            the string representation of the result

        """
        return "\n".join(
            [
                "Inputs",
                "------",
                f"Time:             {self.time_formatted}",
                f"Weight:           {self.weight_kg:.2f} kg",
                f"Distance:         {self.distance_km:.2f} km",
                f"Average speed:    {self.speed_kmph:.2f} km/h",
                "\nResults",
                "-------",
                f"Average power:                {self.avgerage_power_w:.0f} W",
                f"Work done:                    {self.work_j * 1e-3:.0f} kJ",
                f"Energy consumption cyclist:   {self.kcal_burned:.0f} kcal",
            ]
        )

    @property
    def detailed(self) -> str:
        """
        Return the detailed string representation of the result.

        Returns
        -------
            the detailed string representation of the result

        """
        return "\n".join(
            [
                "Inputs",
                "------",
                f"Time:             {self.time_formatted}",
                f"Weight:           {self.weight_kg:.2f} kg",
                f"Distance:         {self.distance_km:.2f} km",
                f"Average speed:    {self.speed_kmph:.2f} km/h",
                "\nResults",
                "-------",
                f"Average power:                {self.avgerage_power_w:.0f} W",
                f"Work done:                    {self.work_j * 1e-3:.0f} kJ",
                f"Energy consumption cyclist:   {self.kcal_burned:.0f} kcal",
                "Note that the the work done by the cyclist is smaller than the"
                " energy consumption as the human body is not 100% efficient.",
                "\nConstants",
                "---------",
                f"Air density:              {self.air_density_kgpm3} kg/m^3",
                f"Roll resistance:          {self.roll_resistance}",
                f"Gravity:                  {self.gravity} m/s^2",
                f"Human efficiency:         {self.human_efficiency}",
                f"Drive train efficiency:   {self.drive_train_efficiency}",
                f"Drag coefficient x Area:  {self.drag_coefficient_times_area_m2}",
            ]
        )

    @property
    def json(self) -> str:
        """
        Return the result as a JSON string.

        Returns
        -------
            the result as a JSON string

        """
        return (
            "{"
            f'"time": "{self.time_formatted}", '
            f'"weight": {self.weight_kg:.2f}, '
            f'"distance": {self.distance_km:.2f}, '
            f'"average_speed": {self.speed_kmph:.2f}, '
            f'"work_done": {self.work_j:.0f}, '
            f'"power": {self.avgerage_power_w:.0f}, '
            f'"calories_burned": {self.kcal_burned:.0f}, '
            f'"air_density": {self.air_density_kgpm3}, '
            f'"drag_coefficient_times_area": {self.drag_coefficient_times_area_m2}, '
            f'"roll_resistance": {self.roll_resistance}, '
            f'"gravity": {self.gravity}, '
            f'"human_efficiency": {self.human_efficiency}'
            "}"
        )

    @property
    def time_formatted(self) -> str:
        """
        Return the time formatted as hours and minutes.

        Returns
        -------
            the time formatted as hours and minutes

        """
        hours: int = int(self.time_s // 3600)
        minutes: int = int((self.time_s % 3600) // 60)
        return f"{hours} hours {minutes} minutes"

    @property
    def distance_km(self) -> float:
        """
        Return the distance cycled in kilometers.

        Returns
        -------
            the distance cycled in kilometers

        """
        return self.distance_m / 1000

    @property
    def speed_kmph(self) -> float:
        """
        Return the average speed in km/h.

        Returns
        -------
            the average speed in km/h

        """
        return self.distance_km / (self.time_s / 3600)

    @property
    def speed_ms(self) -> float:
        return self.distance_m / self.time_s

    @property
    def avgerage_power_w(self) -> float:
        """
        Return the power output in watts.

        Returns
        -------
            the power output in watts

        """
        return self.work_j / self.time_s

    @property
    def work_j(self) -> float:
        """
        Work done in joules.

        Returns
        -------
            the work done in joules

        """
        return self._calc_work()

    def _calc_work(self, efficiency: float = 1) -> float:
        """
        Calculate the work that needs to be done in joules.

        3 forces are considered that the cyclist has to overcome:
            - Rolling resistance, created by the tires on the road.
            - Drag, created by the air resistance.
            - Gravity, created by the slope of the road.

        The rolling resistance is calculated by the weight of the cyclist and
        bike times the coefficient of rolling resistance.

        The drag is calculated by using the drag coefficient times the frontal
        area.

        The work done to overcome the gravity is calculated detemined the
        potential energy difference between the start and end of the ride.

        By combining these forces, the total force that needs to be overcome is
        calculated and can be used to determine the work in joules.

        Often, the actual is not 100% efficient. Hence, the energy neede by the
        actuator will be greater than the energy that is actually supplied to
        the pedals. This is taken into account by the `efficiency_actuator`
        parameter. The default value is 1, which means that the energy needed
        by the actuator is equal to the energy supplied to the pedals.

        In the case of a cyclist, the efficiency is typically around 0.25. Thus,
        the work supplied by the cyclist must be divided by the efficiency to
        get the actual energy needed by the cyclist.

        Note that, for an `efficiency_actuator` of 1 and a netto elevation gain
        of 0 (for example, 100 ascent and 100 descent), the work done for this
        climb is 0. This is because the energy used to ascend is returned when
        descending. However, when an efficiency of 0.25 is used, the work done
        is greater than 0, since the energy used to ascend is greater than the
        energy returned when descending.

        Returns
        -------
            the work that needs to be done in joules

        """
        force_drag: float = (
            0.5
            * self.drag_coefficient_times_area_m2
            * self.air_density_kgpm3
            * self.speed_ms**2
        )
        work_drag: float = (self.distance_m * force_drag) / efficiency

        force_gravity: float = self.weight_kg * self.gravity
        work_ascend: float = (self.ascend_m * force_gravity) / efficiency
        work_descend: float = -self.descent_m * force_gravity
        work_gravity: float = work_ascend + work_descend

        force_roll: float = force_gravity * self.roll_resistance
        work_roll: float = (self.distance_m * force_roll) / efficiency

        return work_roll + work_drag + work_gravity

    @property
    def kcal_burned(self) -> float:
        """
        Return the number of calories burned in kcal.

        Returns
        -------
            the number of calories burned in kcal

        """
        joules_to_kcal: float = 0.239005736 * 1e-3
        work_j: float = self._calc_work(self.human_efficiency)
        return work_j * joules_to_kcal


def main() -> str:
    """
    Return cycling statistics based on the cli arguments.

    Returns
    -------
        The cycling statistics based on the cli arguments

    """
    parser: ArgumentParser = make_parser()
    args: Namespace = parser.parse_args()

    result: CyclingStatistics = CyclingStatistics(
        distance_m=args.distance_km * 1000,
        time_s=args.time_h * 3600,
        weight_kg=args.weight_kg,
        ascend_m=args.ascend_m,
        descent_m=args.descent_m,
    )
    return getattr(result, args.output)


def make_parser() -> ArgumentParser:
    """
    Return the argument parser for the script.

    Returns
    -------
        The argument parser for the script

    """
    parser: ArgumentParser = ArgumentParser(
        description="Estimate the number of calories burned while cycling."
    )
    parser.add_argument(
        "weight_kg",
        action="store",
        type=float,
        help="Weight of the cyclist + bike in kg.",
    )

    parser.add_argument(
        "distance_km", action="store", type=float, help="Distance cycled in km."
    )

    parser.add_argument(
        "time_h",
        action="store",
        type=float,
        help="Time taken to cycle the distance in hours.",
    )

    parser.add_argument(
        "ascend_m",
        action="store",
        type=float,
        default=0,
        nargs="?",
        help="Total ascent in meters.",
    )

    parser.add_argument(
        "descent_m",
        action="store",
        type=float,
        default=0,
        nargs="?",
        help="Total descent in meters.",
    )

    parser.add_argument(
        "--output",
        action="store",
        type=str,
        default="summary",
        help="Output format (summary, detailed, json).",
    )

    return parser


if __name__ == "__main__":
    print(main())
