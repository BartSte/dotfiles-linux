#!/usr/bin/env bash

usage() {
    cat <<EOF
Usage: tvim [options] [file] 

Open file in Neovim in the tmux window of session at line. If the:
- session is not specified, the current session will be used. 
- window is not specified, TVIM_WINDOW will be used, if not set, the current
  window will be used.
- pane is not specified, TVIM_PANE will be used, if not set, the current pane
  will be used.
- line is not specified, the first line will be used.

When no vim/neovim is running in the pane, a new neovim instance will be
started if the pane is running a shell (zsh or bash). Otherwise, the script
will exit with code 1.

When passing the --debug option, debug messages will be printed to stdout.

Arguments:
  file            The file to open

Options:
  -h, --help      Print this help message and exit
  -s, --session   Specify the tmux session, default to current session
  -w, --window    Specify the tmux window, default to current window
  -p, --pane      Specify the tmux pane, default to current pane
  -l, --line      Specify the line number, default to 1
  -d, --debug     Print debug messages
EOF
}

#######################################
# Check if tmux is running.
#######################################
assert_tmux() {
    [[ -z $TMUX ]] && echo "Not in a tmux session" && exit 1
}

#######################################
# Get the options passed to the script. It relies on the following globals:
#  session: The session name
#  window: The window number
#  pane: The pane number
#  line: The line number
#  debug: The debug file
#  file: The file to open
#
# Arguments:
#   $@: The options passed to the script.
#
#######################################
parse_args() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h | --help)
                usage
                exit 0
                ;;
            -s | --session)
                session=$2
                shift
                ;;
            -w | --window)
                window=$2
                shift
                ;;
            -p | --pane)
                pane=$2
                shift
                ;;
            -l | --line)
                line=$2
                shift
                ;;
            -d | --debug)
                debug=/dev/stdout
                ;;
            *)
                file=$1
                ;;
        esac
        shift
    done
}

#######################################
# Get the commands running in each pane of a window in a session.
# Arguments:
#   pane: The pane number
#   window: The window number
#   session: The session name
#
# Returns:
#  The commands running in each pane of a window in a session.
#  The format is: <pane_index> <pane_current_command>
#######################################
tmux_commands() {
    local pane=$1
    local window=$2
    local session=$3
    tmux list-panes -t $session:$window -F '#{pane_index} #{pane_current_command}'
}

#######################################
# Check if the pane is running `cmd`.
# Arguments:
#  pane: The pane number
#  window: The window number
#  session: The session name
#
# Returns:
# 0 if the pane is running neovim, 1 otherwise.
#######################################
has_cmd() {
    local pane=$1
    local window=$2
    local session=$3
    local re_cmd=$4

    local cmds=$(tmux_commands $pane $window $session)
    echo "Tmux commands: $cmds" >$debug

    local cmd=$(echo "$cmds" | awk -v pane=$pane '{if ($1 == pane) print $2}')
    echo "Current command: $cmd" >$debug

    [[ $cmd =~ $re_cmd ]]
}

#######################################
# Send keys to the pane. Relies on the following globals:
# session: The session name
# window: The window number
# pane: The pane number
# file: The file to open
# line: The line number
#######################################
sendkeys() {
    echo "Sending keys: $@" >$debug
    tmux send-keys -t $session:$window.$pane "$@"
}

assert_tmux

line=1
pane=$(tmux display-message -p '#P')
debug=/dev/null
window=$([[ -z $TVIM_WINDOW ]] && echo $TVIM_WINDOW || tmux display-message -p '#I')
session=$([[ -z $TVIM_SESSION ]] && echo $TVIM_SESSION || tmux display-message -p '#S')

parse_args $@

[[ -z $file ]] && {
    usage
    exit 1
}

if has_cmd $pane $window $session 'vim|nvim'; then
    echo "Neovim is running in $session:$window.$pane" >$debug
    sendkeys C-c
    sendkeys ":e $file|$line" Enter

elif has_cmd $pane $window $session 'zsh|bash'; then
    echo "A shell is running in $session:$window.$pane" >$debug
    sendkeys C-c
    sendkeys "nvim -c ':e $file|$line'" Enter

else
    echo "No vim or a shell is running in $session:$window.$pane" >$debug
    exit 1
fi
