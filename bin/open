#!/usr/bin/env bash

show_usage() {
    cat <<EOF
Usage: $0 <path>
Opens a path in a preferred program.

The option -w, --win can be used to convert all windows paths to wsl paths. 
This is useful when you want to open a windows file in wsl.

Options:
    -h, --help      Show this message and exit.
    -w, --win       Convert windows paths to wsl paths, by default this is not
                    done. If wsl is not running, this fails and is ignored.
    -d, --debug     Send debug messages to stdout or a file. For example:
                    -d /dev/stdout or -d /tmp/debug.log
EOF
}

parse_args() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h | --help)
                show_usage
                exit 0
                ;;
            -w | --win)
                win=true
                ;;
            -d | --debug)
                debug=$2
                date >$debug
                shift
                ;;
            *)
                path=$1
                ;;
        esac
        shift
    done
}

open_url() {
    echo 'Url detected, opening in browser.' >>$debug
    if running_wsl; then
        echo "Opening url with WSLBROWSER: $WSLBROWSER" >>$debug
        "$WSLBROWSER" $1 >>$debug 2>&1 &
    else
        echo "Opening url with BROWSER: $BROWSER" >>$debug
        $BROWSER $1 &>/dev/null &
    fi
}

open_img() {
    echo "Opening image $1 with feh" >>$debug
    feh $1 &>/dev/null &
}

convert_win_path() {
    wslpath -u $path || {
        echo "Failed to convert windows path to wsl path: $path" >>$debug
        exit 1
    }
}

is_url() {
    echo "Checking if path is a url: $1" >>$debug
    [[ $1 =~ ^[a-zA-Z]+://.* ]] || [[ $1 =~ ^www\..* ]]
}

is_html() {
    [[ $1 =~ .*\.html ]]
}

is_image() {
    [[ $1 =~ .*\.png ]] || [[ $1 =~ .*\.jpg ]] || [[ $1 =~ .*\.jpeg ]]
}

is_python() {
    [[ $1 =~ .*\.py[:]* ]]
}

is_pdf() {
    [[ $1 =~ .*\.pdf ]]
}

is_cpp() {
    [[ $1 =~ .*\.c ]] || [[ $1 =~ .*\.h ]] || [[ $1 =~ .*\.cpp ]] || [[ $1 =~ .*\.hpp ]]
}

open_python() {
    local path=$1
    local pane=0
    local window=0

    local file=$(echo $path | cut -d ':' -f 1)
    local line=$(echo $path | cut -d ':' -f 2 -s) # -s ensures nothing is returned if ':' is not found
    line=${line:-1}                               # default to 1 if line is empty

    echo "Opening python file: $file" >>$debug
    echo "Python file line: $line" >>$debug

    if running_tmux; then
        tvim -w $window -p $pane -l $line $file
    else
        nvim -c ":e $file|$line"
    fi
}

open_cpp() {
    local path=$1
    local pane=0
    local window=0

    local file=$(echo $path | cut -d ':' -f 1)
    local line=$(echo $path | cut -d ':' -f 2 -s) # -s ensures nothing is returned if ':' is not found
    line=${line:-1}                               # default to 1 if line is empty

    echo "Opening cpp file: $file" >>$debug
    echo "Cpp file line: $line" >>$debug

    if running_tmux; then
        tvim -w $window -p $pane -l $line $file
    else
        nvim -c ":e $file|$line"
    fi
}

running_tmux() {
    [[ ! -z $TMUX ]]
}

win=false
debug=/dev/null
parse_args $@
echo "Opening path/url: $path" >>$debug
echo "option: win is: $win" >>$debug

if is_url $path; then
    open_url $path
    exit 0
fi

if $win && $(which wslpath &>'/dev/null'); then
    path=$(convert_win_path $path)
fi

if is_html $path; then
    open_url $path
elif is_image $path; then
    open_img $path
elif is_pdf $path; then
    zathura $path
elif is_python $path; then
    open_python $path
elif is_cpp $path; then
    open_cpp $path
elif running_tmux; then
    tmux display-message -d 2000 "No handler for $path."
else
    echo "No handler for $path."
fi
